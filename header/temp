#include "esphome.h"

using namespace esphome;

class UARTSensor : public Component, public UARTDevice {
  public:
  UARTSensor(UARTComponent *parent) : UARTDevice(parent) {}
  
  // ประกาศเซ็นเซอร์ทั้งหมดที่ต้องการใช้
  Sensor* presence_sensor = new Sensor();
  Sensor* motion_sensor = new Sensor();
  Sensor* activity_sensor = new Sensor();
  Sensor* fall_sensor = new Sensor();
  Sensor* fall_det_sw = new Sensor();
  Sensor* fall_det_sens = new Sensor();
  Sensor* stationary_residence_sensor = new Sensor();
  Sensor* residence_switch_sensor = new Sensor();  // เซ็นเซอร์สำหรับ residence switch

  void setup() {
    // เรียกฟังก์ชัน queryResidenceSwitch(1) ตัวอย่างการส่งค่า 1 ไปยัง residence switch ในช่วงเริ่มต้น (ถ้าจำเป็น)
    queryResidenceSwitch(1);
  }

  std::vector<int> bytes;

  void loop() override
  {
    while (available())
    {
        bytes.push_back(read());

        // End of Frame is 0x54 0x43
        if(bytes[bytes.size()-2] == 0x54 && bytes[bytes.size()-1] == 0x43)
        {            
            processPacket();
            bytes.clear();        
        }
    }
  }

  void processPacket() {

    // Presence information
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x80) && (bytes[3] == 0x01) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {        
        int presence_sensor_value = int(bytes[6]);
        presence_sensor->publish_state(presence_sensor_value);
        return;
    }

    // Motion information
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x80) && (bytes[3] == 0x02) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {        
        int motion_sensor_value = (bytes[6] == 0x02) ? 1 : 0;
        motion_sensor->publish_state(motion_sensor_value);
        return;
    }

    // Body dynamic parameters
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x80) && (bytes[3] == 0x03) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {        
        int activity_sensor_value = int(bytes[6]);
        activity_sensor->publish_state(activity_sensor_value);
        return;
    }

    // Fall detection reporting
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x83) && (bytes[3] == 0x01) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {        
        int fall_sensor_value = int(bytes[6]);
        fall_sensor->publish_state(fall_sensor_value);
        return;
    }

    // Fall sensitivity change reporting
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x83) && (bytes[3] == 0x0D) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {        
        int fall_det_sens_state = int(bytes[6]);
        fall_det_sens->publish_state(fall_det_sens_state);
        return;
    }

    // Fall detection function switch status
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x83) && (bytes[3] == 0x00) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {        
        int fall_det_sw_state = int(bytes[6]);
        fall_det_sw->publish_state(fall_det_sw_state);
        return;
    }

    // Stationary residence state reporting
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x83) && (bytes[3] == 0x05) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {
        int stationary_residence_state = int(bytes[6]);
        stationary_residence_sensor->publish_state(stationary_residence_state);
        return;
    }

    // Response for residence switch query
    if((bytes[0] == 0x53) && (bytes[1] == 0x59) && (bytes[2] == 0x83) && (bytes[3] == 0x8B) && (bytes[4] == 0x00) && (bytes[5] == 0x01))
    {
        int residence_switch_sensitivity = int(bytes[6]);
        residence_switch_sensor->publish_state(residence_switch_sensitivity);
        return;
    }
  }

  // ฟังก์ชันสำหรับส่งคำสั่ง Query residence switch
  void queryResidenceSwitch(int value) {
      // ตรวจสอบว่า value อยู่ในช่วง 0-3 ก่อนส่ง
      if (value < 0 || value > 3) return;

      // คำนวณ checksum sum (ตัวอย่างนี้ใช้การคำนวณ sum)
      int sum = (0x53 + 0x59 + 0x83 + 0x8B + 0x00 + 0x01 + value) & 0xFF;

      // ส่งคำสั่ง UART
      write_array({0x53, 0x59, 0x83, 0x8B, 0x00, 0x01, (uint8_t)value, (uint8_t)sum, 0x54, 0x43});
  }

  char hexmap[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

  std::string hexStr(int data)
  {
    std::string s = "    ";
    s[0] = '0';
    s[1] = 'x';
    s[2] = hexmap[(data & 0xF0) >> 4];
    s[3] = hexmap[data & 0x0F];
    return s;
  }
};
